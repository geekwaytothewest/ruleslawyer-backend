// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                           @id @default(autoincrement())
  email                       String                        @unique
  name                        String?
  username                    String?                       @unique
  superAdmin                  Boolean                       @default(false)
  pronouns                    Pronouns?                     @relation(fields: pronounsId, references: [id])
  pronounsId                  Int?
  organizations               Organization[]
  UserOrganizationPermissions UserOrganizationPermissions[]
  UserConventionPermissions   UserConventionPermissions[]
  Attendee                    Attendee[]
}

model Attendee {
  id               Int        @id @default(autoincrement())
  convention       Convention @relation(fields: conventionId, references: [id])
  conventionId     Int
  badgeName        String
  badgeFirstName   String
  badgeLastName    String
  legalName        String
  user             User?      @relation(fields: userId, references: [id])
  userId           Int?
  badgeNumber      String
  barcode          String
  badgeType        BadgeType? @relation(fields: badgeTypeId, references: [id])
  badgeTypeId      Int?
  tteBadgeNumber   Int?
  tteBadgeId       String?
  email            String?
  pronouns         Pronouns?  @relation(fields: pronounsId, references: [id])
  pronounsId       Int?
  checkedIn        Boolean    @default(false)
  printed          Boolean    @default(false)
  registrationCode String?
  copies           Copy[]
  checkOuts        CheckOut[]
  players          Player[]
  merch            String?

  @@unique([conventionId, badgeNumber])
  @@unique([conventionId, barcode])
  @@unique([conventionId, tteBadgeNumber])
}

model BadgeType {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Attendee Attendee[]
}

model Pronouns {
  id       Int        @id @default(autoincrement())
  pronouns String     @unique
  Attendee Attendee[]
  User     User[]
}

model UserOrganizationPermissions {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: userId, references: [id])
  userId         Int
  organization   Organization @relation(fields: organizationId, references: [id])
  organizationId Int
  admin          Boolean
  geekGuide      Boolean
  readOnly       Boolean

  @@unique([userId, organizationId])
}

model UserConventionPermissions {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: userId, references: [id])
  userId       Int
  convention   Convention @relation(fields: conventionId, references: [id])
  conventionId Int
  admin        Boolean
  geekGuide    Boolean
  attendee     Boolean

  @@unique([userId, conventionId])
}

model Organization {
  id             Int                           @id @default(autoincrement())
  name           String                        @unique
  owner          User                          @relation(fields: ownerId, references: [id])
  ownerId        Int
  users          UserOrganizationPermissions[]
  collections    Collection[]
  conventions    Convention[]
  Copy           Copy[]
  ConventionType ConventionType[]
}

model ConventionType {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  logo           Bytes?
  logoSquare     Bytes?
  icon           String?
  content        String?
  organization   Organization @relation(fields: organizationId, references: [id])
  organizationId Int
  Convention     Convention[]

  @@unique([name, organizationId])
}

model RegistrationDate {
  id           Int        @id @default(autoincrement())
  convention   Convention @relation(fields: conventionId, references: [id])
  conventionId Int
  name         String
  startDate    DateTime
  endDate      DateTime
}

model Collection {
  id             Int                     @id @default(autoincrement())
  name           String
  organization   Organization            @relation(fields: organizationId, references: [id])
  organizationId Int
  copies         Copy[]
  public         Boolean                 @default(false)
  allowWinning   Boolean                 @default(false)
  conventions    ConventionCollections[]

  @@unique([organizationId, name])
}

model Game {
  id               Int       @id @default(autoincrement())
  bggId            Int?      @unique
  lastBGGSync      DateTime?
  name             String    @unique
  shortDescription String?
  designer         String?
  artist           String?
  publisher        String?
  longDescription  String?
  minPlayers       Int?
  maxPlayers       Int?
  minTime          Int?
  maxTime          Int?
  minAge           Int?
  weight           Decimal?
  coverArt         Bytes?
  copies           Copy[]
}

model Copy {
  id               Int          @id @default(autoincrement())
  game             Game         @relation(fields: gameId, references: [id])
  gameId           Int
  dateAdded        DateTime
  barcodeLabel     String
  barcode          String
  dateRetired      DateTime?
  comments         String?
  winnable         Boolean      @default(true)
  winner           Attendee?    @relation(fields: winnerId, references: [id])
  winnerId         Int?
  coverArtOverride Bytes?
  collection       Collection  @relation(fields: collectionId, references: [id])
  collectionId     Int
  checkOuts        CheckOut[]
  organization     Organization @relation(fields: organizationId, references: [id])
  organizationId   Int

  @@unique([collectionId, barcode])
  @@unique([collectionId, barcodeLabel])
  @@unique([organizationId, barcode])
  @@unique([organizationId, barcodeLabel])
}

model CheckOut {
  id         Int       @id @default(autoincrement())
  attendee   Attendee  @relation(fields: attendeeId, references: [id])
  attendeeId Int
  checkOut   DateTime
  checkIn    DateTime?
  Copy       Copy?     @relation(fields: copyId, references: [id])
  copyId     Int?
  players    Player[]
  submitted  Boolean   @default(false)
}

model Player {
  id         Int      @id @default(autoincrement())
  checkOut   CheckOut @relation(fields: checkOutId, references: [id])
  checkOutId Int
  attendee   Attendee @relation(fields: attendeeId, references: [id])
  attendeeId Int
  rating     Int?
  wantToWin  Boolean
}

model Convention {
  id                Int                         @id @default(autoincrement())
  organization      Organization                @relation(fields: organizationId, references: [id])
  organizationId    Int
  name              String
  theme             String                      @default("")
  logo              Bytes                       @default("")
  logoSquare        Bytes                       @default("")
  icon              String                      @default("")
  startDate         DateTime
  endDate           DateTime
  registrationUrl   String?                     @default("")
  type              ConventionType              @relation(fields: typeId, references: [id])
  typeId            Int
  annual            String                      @default("")
  size              Int?
  registrationDates RegistrationDate[]
  cancelled         Boolean                     @default(false)
  users             UserConventionPermissions[]
  attendees         Attendee[]
  tteConventionId   String?
  collections       ConventionCollections[]

  @@unique([name, organizationId])
}

model ConventionCollections {
  id           Int        @id @default(autoincrement())
  conventionId Int
  convention   Convention @relation(fields: conventionId, references: [id])
  collectionId Int
  collection   Collection @relation(fields: collectionId, references: [id])

  @@unique([conventionId, collectionId])
}
